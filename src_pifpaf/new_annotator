"""
Annotate swimmer images with custom confidence filtering.
Compatible with legacy OpenPifPaf (no predictor.fields).

Usage:
    python new_annotator.py
"""

import os, numpy as np, openpifpaf, matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import PIL.Image
import argparse

# ---------------------------------------------------------------------------
# Paths
# ---------------------------------------------------------------------------
INPUT_FOLDER  = "temp/data/Test_data_02"
OUTPUT_FOLDER = "temp/data/annotated_images"
CONF_TH       = 0.1

os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# ---------------------------------------------------------------------------
# Setup decoder configuration once (Fixes AssertionError)
# ---------------------------------------------------------------------------
parser = argparse.ArgumentParser()
openpifpaf.decoder.cli(parser)
args = parser.parse_args([
    '--instance-threshold=0.05',       # ↓ more sensitive to weak detections
    '--seed-threshold=0.05',           # ↓ more candidate seeds kept
    '--keypoint-threshold=0.05',       # ↓ keeps more partial poses
    '--force-complete-pose',           # complete even weak skeletons
    '--dense-connections',             # allows mid-body reasoning
    '--decoder-workers=0'              # for Windows compatibility
])
openpifpaf.decoder.configure(args)

# ---------------------------------------------------------------------------
# Helper functions
# ---------------------------------------------------------------------------
def load_image(path):
    return PIL.Image.open(path).convert('RGB')

def run_pifpaf_prediction(image):
    predictor = openpifpaf.Predictor(checkpoint='shufflenetv2k30')
    predictions = predictor.numpy_image(np.asarray(image))
    return predictions[0]

def draw_predictions(image, predictions, out_path):
    fig, ax = plt.subplots()
    ax.imshow(image)

    # COCO skeleton structure
    skeleton = [
        (15, 13), (13, 11),             # Left leg
        (16, 14), (14, 12),             # Right leg
        (11, 12),                       # Hips
        (5, 11), (6, 12),               # Torso sides
        (5, 6),                         # Shoulders
        (5, 7), (7, 9),                 # Left arm
        (6, 8), (8, 10),                # Right arm
        (0, 1), (0, 2),                 # Nose to eyes
        (1, 3), (2, 4),                 # Eyes to ears
        (0, 5), (0, 6)                  # Nose to shoulders
    ]

    for ann in predictions:
        keypoints = ann.data
        valid_points = []

        for idx, keypoint in enumerate(keypoints):
            if len(keypoint) != 3:
                print(f"Skipping malformed keypoint: {keypoint}")
                valid_points.append(None)
                continue

            x, y, conf = keypoint
            try:
                conf_scalar = float(conf) if np.isscalar(conf) else float(conf[0])
            except Exception as e:
                print(f"Skipping malformed conf value: {conf} ({type(conf)})")
                valid_points.append(None)
                continue

            if conf_scalar > CONF_TH:
                ax.plot(x, y, 'o', markersize=3, color='red')
                valid_points.append((x, y))
            else:
                valid_points.append(None)

        # Draw skeleton lines
        for joint1, joint2 in skeleton:
            if joint1 < len(valid_points) and joint2 < len(valid_points):
                p1 = valid_points[joint1]
                p2 = valid_points[joint2]
                if p1 is not None and p2 is not None:
                    ax.plot([p1[0], p2[0]], [p1[1], p2[1]], color='red', linewidth=1)

    ax.axis('off')
    fig.savefig(out_path, bbox_inches='tight', pad_inches=0)
    plt.close(fig)



# ---------------------------------------------------------------------------
# Main loop
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    image_files = [f for f in os.listdir(INPUT_FOLDER) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

    for idx, filename in enumerate(image_files):
        print(f"[{idx+1}/{len(image_files)}] Processing {filename}")
        img_path = os.path.join(INPUT_FOLDER, filename)
        image = load_image(img_path)

        predictions = run_pifpaf_prediction(image)

        out_path = os.path.join(OUTPUT_FOLDER, f"annotated_{filename}")
        draw_predictions(image, predictions, out_path)

        print(f"Saved: {out_path}")
